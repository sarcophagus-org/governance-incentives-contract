/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Collection,
  CollectionInterface,
} from "../../contracts/Collection";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BalanceClaimableByVoters",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientContractBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientVoterBalance",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimAmount",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Collection.Reward[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "Rewards",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimableByVoters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "daoWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "contractBalance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "_address",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "_amount",
            type: "uint256",
          },
        ],
        internalType: "struct Collection.Reward[]",
        name: "rewards",
        type: "tuple[]",
      },
    ],
    name: "setRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawableByDao",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001456380380620014568339818101604052810190620000379190620001c8565b620000576200004b6200009260201b60201c565b6200009a60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001fa565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001908262000163565b9050919050565b620001a28162000183565b8114620001ae57600080fd5b50565b600081519050620001c28162000197565b92915050565b600060208284031215620001e157620001e06200015e565b5b6000620001f184828501620001b1565b91505092915050565b60805161122b6200022b600039600081816102fc015281816103dd015281816107290152610887015261122b6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b146101425780639ccdff3914610160578063beb382321461017c578063c2c6b46e1461019a578063f2fde38b146101a4578063fc0c546a146101c0576100a9565b80634e71d92d146100ae5780636f9fb98a146100cc57806370a08231146100ea578063715018a61461011a5780638991913d14610124575b600080fd5b6100b66101de565b6040516100c39190610a47565b60405180910390f35b6100d46103d9565b6040516100e19190610a47565b60405180910390f35b61010460048036038101906100ff9190610ad4565b61047a565b6040516101119190610a47565b60405180910390f35b610122610492565b005b61012c6104a6565b6040516101399190610a47565b60405180910390f35b61014a6104ac565b6040516101579190610b10565b60405180910390f35b61017a60048036038101906101759190610d05565b6104d5565b005b6101846106cd565b6040516101919190610a47565b60405180910390f35b6101a26106d3565b005b6101be60048036038101906101b99190610ad4565b610802565b005b6101c8610885565b6040516101d59190610dad565b60405180910390f35b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610258576040517f78192e3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600260008282546102f39190610df7565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610355929190610e2b565b6020604051808303816000875af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103989190610e8c565b507f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d433826040516103ca929190610e2b565b60405180910390a18091505090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104349190610b10565b602060405180830381865afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104759190610ece565b905090565b60036020528060005260406000206000915090505481565b61049a6108a9565b6104a46000610927565b565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104dd6108a9565b6104e56109eb565b600080600090505b82518110156105355782818151811061050957610508610efb565b5b602002602001015160200151826105209190610f2a565b9150808061052d90610f80565b9150506104ed565b50806001541015610572576040517f786e0a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156106915782818151811061059157610590610efb565b5b602002602001015160200151600160008282546105ae9190610df7565b925050819055508281815181106105c8576105c7610efb565b5b602002602001015160200151600360008584815181106105eb576105ea610efb565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106409190610f2a565b9250508190555082818151811061065a57610659610efb565b5b602002602001015160200151600260008282546106779190610f2a565b92505081905550808061068990610f80565b915050610575565b507f9ee4859a2abc19b4ba84a56dd0a86f47b0faf28a8c3247267e86d188130e22e1826040516106c191906110c4565b60405180910390a15050565b60025481565b6106db6108a9565b60025460015411610718576040517f13e54d8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600154905060006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610782929190610e2b565b6020604051808303816000875af11580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190610e8c565b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436433826040516107f7929190610e2b565b60405180910390a150565b61080a6108a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087090611169565b60405180910390fd5b61088281610927565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108b1610a26565b73ffffffffffffffffffffffffffffffffffffffff166108cf6104ac565b73ffffffffffffffffffffffffffffffffffffffff1614610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c906111d5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060025403610a08576109fd6103d9565b600181905550610a24565b600254610a136103d9565b610a1d9190610df7565b6001819055505b565b600033905090565b6000819050919050565b610a4181610a2e565b82525050565b6000602082019050610a5c6000830184610a38565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa182610a76565b9050919050565b610ab181610a96565b8114610abc57600080fd5b50565b600081359050610ace81610aa8565b92915050565b600060208284031215610aea57610ae9610a6c565b5b6000610af884828501610abf565b91505092915050565b610b0a81610a96565b82525050565b6000602082019050610b256000830184610b01565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b7982610b30565b810181811067ffffffffffffffff82111715610b9857610b97610b41565b5b80604052505050565b6000610bab610a62565b9050610bb78282610b70565b919050565b600067ffffffffffffffff821115610bd757610bd6610b41565b5b602082029050602081019050919050565b600080fd5b600080fd5b610bfb81610a2e565b8114610c0657600080fd5b50565b600081359050610c1881610bf2565b92915050565b600060408284031215610c3457610c33610bed565b5b610c3e6040610ba1565b90506000610c4e84828501610abf565b6000830152506020610c6284828501610c09565b60208301525092915050565b6000610c81610c7c84610bbc565b610ba1565b90508083825260208201905060408402830185811115610ca457610ca3610be8565b5b835b81811015610ccd5780610cb98882610c1e565b845260208401935050604081019050610ca6565b5050509392505050565b600082601f830112610cec57610ceb610b2b565b5b8135610cfc848260208601610c6e565b91505092915050565b600060208284031215610d1b57610d1a610a6c565b5b600082013567ffffffffffffffff811115610d3957610d38610a71565b5b610d4584828501610cd7565b91505092915050565b6000819050919050565b6000610d73610d6e610d6984610a76565b610d4e565b610a76565b9050919050565b6000610d8582610d58565b9050919050565b6000610d9782610d7a565b9050919050565b610da781610d8c565b82525050565b6000602082019050610dc26000830184610d9e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0282610a2e565b9150610e0d83610a2e565b925082821015610e2057610e1f610dc8565b5b828203905092915050565b6000604082019050610e406000830185610b01565b610e4d6020830184610a38565b9392505050565b60008115159050919050565b610e6981610e54565b8114610e7457600080fd5b50565b600081519050610e8681610e60565b92915050565b600060208284031215610ea257610ea1610a6c565b5b6000610eb084828501610e77565b91505092915050565b600081519050610ec881610bf2565b92915050565b600060208284031215610ee457610ee3610a6c565b5b6000610ef284828501610eb9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f3582610a2e565b9150610f4083610a2e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7557610f74610dc8565b5b828201905092915050565b6000610f8b82610a2e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fbd57610fbc610dc8565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ffd81610a96565b82525050565b61100c81610a2e565b82525050565b6040820160008201516110286000850182610ff4565b50602082015161103b6020850182611003565b50505050565b600061104d8383611012565b60408301905092915050565b6000602082019050919050565b600061107182610fc8565b61107b8185610fd3565b935061108683610fe4565b8060005b838110156110b757815161109e8882611041565b97506110a983611059565b92505060018101905061108a565b5085935050505092915050565b600060208201905081810360008301526110de8184611066565b905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111536026836110e6565b915061115e826110f7565b604082019050919050565b6000602082019050818103600083015261118281611146565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111bf6020836110e6565b91506111ca82611189565b602082019050919050565b600060208201905081810360008301526111ee816111b2565b905091905056fea26469706673582212209a75353e33ea7b935ac79c55327f2d54091842983dcfc6165bc3c1e6b093667064736f6c634300080d0033";

type CollectionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CollectionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Collection__factory extends ContractFactory {
  constructor(...args: CollectionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Collection> {
    return super.deploy(_token, overrides || {}) as Promise<Collection>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): Collection {
    return super.attach(address) as Collection;
  }
  override connect(signer: Signer): Collection__factory {
    return super.connect(signer) as Collection__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CollectionInterface {
    return new utils.Interface(_abi) as CollectionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Collection {
    return new Contract(address, _abi, signerOrProvider) as Collection;
  }
}
